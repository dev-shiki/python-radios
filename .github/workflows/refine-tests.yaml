name: Refine Tests

on:
  workflow_dispatch:
    inputs:
      max_refinement_attempts:
        description: 'Maximum refinement attempts for failing tests'
        required: false
        default: '2'
      target_branch:
        description: 'Branch to refine tests from'
        required: true
        default: 'main'
      run_id:
        description: 'Run ID of the generate test workflow'
        required: true

env:
  DEFAULT_PYTHON: "3.11"
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  # Standardized coverage file names
  COVERAGE_INITIAL: coverage-initial.json
  COVERAGE_FINAL: coverage-final.json
  COVERAGE_AFTER_GEN: coverage-after-generation.json

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validate run_id
        run: |
          if [ -z "${{ github.event.inputs.run_id }}" ]; then
            echo "::error::run_id is required"
            exit 1
          fi
          
          # Validate run_id is numeric
          if ! [[ "${{ github.event.inputs.run_id }}" =~ ^[0-9]+$ ]]; then
            echo "::error::run_id must be numeric"
            exit 1
          fi
          
          echo "RUN_ID=${{ github.event.inputs.run_id }}" >> $GITHUB_ENV

  refine-tests:
    name: Refine Tests
    needs: validate-inputs
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.target_branch }}

      - name: Prepare directories
        run: |
          # Clean and prepare test directory
          rm -rf tests/
          mkdir -p tests/
          # Clean and prepare coverage directory
          rm -rf coverage-final/
          mkdir -p coverage-final/

      - name: 💾 Download test files from artifact
        id: download-tests
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting artifact download URL..."
          ARTIFACT_NAME="test-files-${{ github.event.inputs.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.inputs.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::error::Could not find artifact: $ARTIFACT_NAME"
            exit 1
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o artifact.zip
          
          # Verify zip file
          if [ ! -f "artifact.zip" ]; then
            echo "::error::Failed to download artifact"
            exit 1
          fi
          
          # Extract to tests directory
          unzip -o artifact.zip -d tests/
          if [ $? -ne 0 ]; then
            echo "::error::Failed to extract artifact"
            exit 1
          fi
          rm artifact.zip

      - name: 💾 Download coverage files from artifact
        id: download-coverage
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting coverage artifact download URL..."
          ARTIFACT_NAME="coverage-files-${{ github.event.inputs.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.inputs.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::warning::Could not find coverage artifact: $ARTIFACT_NAME"
            exit 0
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o coverage.zip
          
          # Verify zip file
          if [ ! -f "coverage.zip" ]; then
            echo "::warning::Failed to download coverage artifact"
            exit 0
          fi
          
          # Extract to current directory
          unzip -o coverage.zip
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to extract coverage artifact"
            exit 0
          fi
          rm coverage.zip

      - name: 💾 Download experiment data from artifact
        id: download-experiment
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting experiment data artifact download URL..."
          ARTIFACT_NAME="experiment-data-${{ github.event.inputs.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.inputs.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::warning::Could not find experiment data artifact: $ARTIFACT_NAME"
            exit 0
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o experiment.zip
          
          # Verify zip file
          if [ ! -f "experiment.zip" ]; then
            echo "::warning::Failed to download experiment data artifact"
            exit 0
          fi
          
          # Extract to current directory
          unzip -o experiment.zip
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to extract experiment data artifact"
            exit 0
          fi
          rm experiment.zip

      - name: 🔐 Validate prerequisites
        id: validate
        run: |
          echo "🔍 Checking prerequisites..."
          
          # Create temp directory for this run
          RUN_ID="${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          export TEMP_DIR="/tmp/test_refine_${RUN_ID}"
          mkdir -p "${TEMP_DIR}"
          echo "TEMP_DIR=${TEMP_DIR}" >> $GITHUB_ENV
          
          # Determine source directory
          if [ -d "src" ]; then
            SRC_DIR="src"
          else
            SRC_DIR="."
          fi
          echo "SRC_DIR=$SRC_DIR" >> $GITHUB_ENV
          
          # Ensure coverage directory exists
          mkdir -p coverage-final/
          
          # Check API key
          if [ -z "$OPENROUTER_API_KEY" ]; then
            echo "::error::OPENROUTER_API_KEY not set in secrets"
            exit 1
          fi
          echo "✅ API key found"
          
          # Get input parameters with defaults
          MAX_ATTEMPTS="${{ github.event.inputs.max_refinement_attempts }}"
          
          # Default values if empty
          MAX_ATTEMPTS="${MAX_ATTEMPTS:-2}"
          
          # Clean inputs - remove all non-numeric characters
          MAX_ATTEMPTS=$(echo "$MAX_ATTEMPTS" | sed 's/[^0-9]//g')
          
          # Set defaults if empty after cleaning
          MAX_ATTEMPTS="${MAX_ATTEMPTS:-2}"
          
          # Validate max attempts (>= 1)
          if [ "$MAX_ATTEMPTS" -lt 1 ] 2>/dev/null; then
            echo "::error::Invalid max_refinement_attempts: must be >= 1 (got $MAX_ATTEMPTS)"
            exit 1
          fi
          
          # Export validated values
          echo "VALIDATED_MAX_ATTEMPTS=$MAX_ATTEMPTS" >> $GITHUB_ENV
          
          echo "✅ Validated inputs:"
          echo "  Max refinement attempts: $MAX_ATTEMPTS"
          echo "  Source directory: $SRC_DIR"
          
          # Check source directory
          if [ ! -d "src" ] && [ ! -f "setup.py" ] && [ ! -f "pyproject.toml" ]; then
            echo "::warning::No standard Python project structure found"
          fi
          
          # Create necessary directories
          mkdir -p coverage-final .github/scripts
          
          # Initialize log files with headers
          echo "# Test Refinement Experiment Log" > refinement_metrics.txt
          echo "Run ID: ${RUN_ID}" >> refinement_metrics.txt
          echo "Started: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> refinement_metrics.txt
          echo "Max Refinement Attempts: $MAX_ATTEMPTS" >> refinement_metrics.txt
          echo "Source Directory: $SRC_DIR" >> refinement_metrics.txt
          echo "---" >> refinement_metrics.txt
          
          echo "✅ Prerequisites validated"

      - name: 🏗 Set up Poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: 🏗 Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5.5.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "poetry"

      - name: 🏗 Install dependencies
        run: |
          set -euo pipefail
          
          # Install base dependencies
          poetry install --no-interaction || {
            echo "::error::Failed to install base dependencies"
            exit 1
          }
          
          # Ensure required packages are installed
          REQUIRED_PACKAGES="pytest pytest-cov pytest-asyncio openai"
          for package in $REQUIRED_PACKAGES; do
            if ! poetry show "$package" &>/dev/null; then
              echo "📦 Installing $package..."
              poetry add "$package" --group dev || {
                echo "::error::Failed to install $package"
                exit 1
              }
            fi
          done
          
          # Verify environment
          poetry check || {
            echo "::warning::Poetry environment check failed"
          }
          
          echo "✅ Dependencies ready"

      - name: 🔄 Refine failing tests
        id: refine
        run: |
          set -euo pipefail
          
          # Verify script
          if [ ! -f ".github/scripts/refine_tests.py" ]; then
            echo "::error::refine_tests.py not found"
            echo "status=script_missing" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Run initial test to get failure count
          echo "Running initial test to get failure count..."
          
          # Ensure coverage directory exists
          mkdir -p coverage-final/
          
          poetry run pytest tests/ \
            -v \
            --tb=short \
            --cov="${SRC_DIR}" \
            --cov-report="json:coverage-final/${COVERAGE_FINAL}" \
            2>&1 | tee "test-results-initial.log" || true
          
          # Count initial failures
          INITIAL_FAILURES=$(grep -c "FAILED" "test-results-initial.log" 2>/dev/null || echo "0")
          INITIAL_FAILURES=$(echo "$INITIAL_FAILURES" | tr -d '\n' | sed 's/^0*//' | xargs)
          INITIAL_FAILURES="${INITIAL_FAILURES:-0}"
          
          MAX_ATTEMPTS=${{ env.VALIDATED_MAX_ATTEMPTS }}
          CURRENT_FAILURES="$INITIAL_FAILURES"
          
          echo "🔄 Starting refinement (max $MAX_ATTEMPTS attempts)" | tee -a refinement_metrics.txt
          echo "Initial failures: $INITIAL_FAILURES" | tee -a refinement_metrics.txt
          
          # If no failures, exit early
          if [ "$INITIAL_FAILURES" -eq 0 ]; then
            echo "✅ No failures to refine" | tee -a refinement_metrics.txt
            echo "status=no_failures" >> $GITHUB_OUTPUT
            echo "final_failures=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          for ATTEMPT in $(seq 1 "$MAX_ATTEMPTS"); do
            # Early exit if no failures remain
            if [ "${CURRENT_FAILURES:-0}" -eq 0 ]; then
              break
            fi
            
            echo "" | tee -a refinement_metrics.txt
            echo "Refinement attempt $ATTEMPT/$MAX_ATTEMPTS" | tee -a refinement_metrics.txt
            ATTEMPT_START=$(date +%s)
            
            # Run refinement
            set +e
            poetry run python .github/scripts/refine_tests.py \
              2>&1 | tee "refinement_attempt_${ATTEMPT}.log"
            REFINE_EXIT=$?
            set -e
            
            if [ "$REFINE_EXIT" -ne 0 ]; then
              echo "::warning::Refinement script exited with code $REFINE_EXIT"
            fi
            
            # Test again
            poetry run pytest tests/ \
              -v \
              --tb=short \
              --cov="${SRC_DIR}" \
              --cov-report="json:coverage-final/${COVERAGE_FINAL}" \
              2>&1 | tee "test-results-attempt-${ATTEMPT}.log" || true
            
            # Count failures safely and trim newlines
            PREVIOUS_FAILURES="${CURRENT_FAILURES:-0}"
            NEW_FAILURE_COUNT=$(grep -c "FAILED" "test-results-attempt-${ATTEMPT}.log" 2>/dev/null || echo "0")
            # Trim any whitespace/newlines and ensure it's a number
            CURRENT_FAILURES=$(echo "$NEW_FAILURE_COUNT" | tr -d '\n' | sed 's/^0*//' | xargs)
            CURRENT_FAILURES="${CURRENT_FAILURES:-0}"
            
            # Calculate fixed safely using if-then
            if [ "$PREVIOUS_FAILURES" -gt "$CURRENT_FAILURES" ]; then
              FIXED=$((PREVIOUS_FAILURES - CURRENT_FAILURES))
            else
              FIXED=0
            fi
            
            DURATION=$(($(date +%s) - ATTEMPT_START))
            
            echo "Attempt $ATTEMPT results:" | tee -a refinement_metrics.txt
            echo "  Duration: ${DURATION}s" | tee -a refinement_metrics.txt
            echo "  Fixed: $FIXED" | tee -a refinement_metrics.txt
            echo "  Remaining: $CURRENT_FAILURES" | tee -a refinement_metrics.txt
            
            # Update error log for next iteration if needed
            if [ "$CURRENT_FAILURES" -gt 0 ] && [ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]; then
              grep -A 5 "FAILED\|ERROR" "test-results-attempt-${ATTEMPT}.log" > test-errors.log 2>/dev/null || true
            fi
          done
          
          # Final summary with safe arithmetic
          if [ "${INITIAL_FAILURES:-0}" -gt "${CURRENT_FAILURES:-0}" ]; then
            TOTAL_FIXED=$((INITIAL_FAILURES - CURRENT_FAILURES))
          else
            TOTAL_FIXED=0
          fi
          
          echo "" | tee -a refinement_metrics.txt
          echo "Refinement complete:" | tee -a refinement_metrics.txt
          echo "  Total fixed: $TOTAL_FIXED" | tee -a refinement_metrics.txt
          echo "  Remaining: $CURRENT_FAILURES" | tee -a refinement_metrics.txt
          
          # Set status based on results
          if [ "${CURRENT_FAILURES:-0}" -eq 0 ]; then
            echo "status=all_fixed" >> $GITHUB_OUTPUT
          elif [ "${CURRENT_FAILURES:-0}" -lt "${INITIAL_FAILURES:-0}" ]; then
            echo "status=partial_fix" >> $GITHUB_OUTPUT
          else
            echo "status=no_improvement" >> $GITHUB_OUTPUT
          fi
          
          echo "final_failures=${CURRENT_FAILURES:-0}" >> $GITHUB_OUTPUT

      - name: 🧪 Run tests again
        id: test-run
        run: |
          set -euo pipefail
          
          # Count actual test files
          TEST_COUNT=$(find tests -name "test_*.py" -not -name "test_placeholder.py" | wc -l)
          
          if [ "$TEST_COUNT" -eq 0 ]; then
            echo "ℹ️ No tests to run"
            echo "status=no_tests" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "🧪 Running $TEST_COUNT test files" | tee -a refinement_metrics.txt
          
          # Ensure coverage directory exists
          mkdir -p coverage-final/
          
          # Run tests (allow failure)
          set +e
          poetry run pytest tests/ \
            -v \
            --tb=short \
            --cov="${SRC_DIR}" \
            --cov-report="json:coverage-final/${COVERAGE_FINAL}" \
            2>&1 | tee test-results.log
          
          TEST_EXIT_CODE=$?
          set -e
          
          # Analyze results with safe grep and trim newlines
          if [ "$TEST_EXIT_CODE" -ne 0 ]; then
            FAILURE_COUNT=$(grep -c "FAILED" test-results.log 2>/dev/null || echo "0")
            # Trim any whitespace/newlines and ensure it's a number
            FAILURE_COUNT=$(echo "$FAILURE_COUNT" | tr -d '\n' | sed 's/^0*//' | xargs)
            FAILURE_COUNT="${FAILURE_COUNT:-0}"
            echo "⚠️ $FAILURE_COUNT test failures" | tee -a refinement_metrics.txt
            
            # Extract error details
            grep -A 5 "FAILED\|ERROR" test-results.log > test-errors.log 2>/dev/null || true
            
            echo "status=has_failures" >> $GITHUB_OUTPUT
            echo "failure_count=$FAILURE_COUNT" >> $GITHUB_OUTPUT
          else
            echo "✅ All tests passed!" | tee -a refinement_metrics.txt
            echo "status=all_passed" >> $GITHUB_OUTPUT
            echo "failure_count=0" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Generate coverage summary
        if: always()
        run: |
          set -euo pipefail
          
          echo "Generating summary..." | tee -a refinement_metrics.txt
          
          # Try main script
          if [ -f ".github/scripts/create_summary.py" ]; then
            poetry run python .github/scripts/create_summary.py || {
              echo "::warning::Summary script failed"
              # Fallback inline
              echo "# Coverage Summary" > COVERAGE_SUMMARY.md
              
              if [ -f "$COVERAGE_INITIAL" ]; then
                INITIAL=$(jq -r '.totals.percent_covered // 0' "$COVERAGE_INITIAL")
                echo "**Initial**: ${INITIAL}%" >> COVERAGE_SUMMARY.md
              fi
              
              if [ -f "coverage-final/$COVERAGE_FINAL" ]; then
                FINAL=$(jq -r '.totals.percent_covered // 0' "coverage-final/$COVERAGE_FINAL")
                echo "**Final**: ${FINAL}%" >> COVERAGE_SUMMARY.md
                
                if [ -n "${INITIAL:-}" ]; then
                  # Use safe arithmetic
                  if command -v bc >/dev/null 2>&1; then
                    DELTA=$(echo "scale=1; $FINAL - $INITIAL" | bc)
                  else
                    # Fallback to integer math if bc not available
                    DELTA=$((${FINAL%.*} - ${INITIAL%.*}))
                  fi
                  echo "**Change**: ${DELTA}%" >> COVERAGE_SUMMARY.md
                fi
              fi
            }
          fi

      - name: 📦 Collect experiment data
        if: always()
        run: |
          set -euo pipefail
          
          echo "📦 Collecting data..." | tee -a refinement_metrics.txt
          
          # Try enhanced collector
          if [ -f ".github/scripts/enhanced_collect_experiment_data.py" ]; then
            poetry run python .github/scripts/enhanced_collect_experiment_data.py || {
              echo "::warning::Enhanced collector failed, using fallback"
              
              # Simple fallback
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              ARCHIVE_DIR="experiment_data_${TIMESTAMP}"
              mkdir -p "$ARCHIVE_DIR"
              
              # Copy all artifacts
              for pattern in tests "*.json" "*.log" "*.txt" "*.md" coverage-final; do
                if ls $pattern >/dev/null 2>&1; then
                  cp -r $pattern "$ARCHIVE_DIR/" 2>/dev/null || true
                fi
              done
              
              zip -r "${ARCHIVE_DIR}.zip" "$ARCHIVE_DIR" || true
            }
          fi

      - name: 💾 Upload refined test files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: refined-test-files-${{ github.run_id }}
          path: tests/
          if-no-files-found: error

      - name: 💾 Upload coverage files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: refined-coverage-files-${{ github.run_id }}
          path: |
            coverage-initial.json
            coverage-final.json
            coverage-after-generation.json
          if-no-files-found: error

      - name: 💾 Upload experiment data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: refined-experiment-data-${{ github.run_id }}
          path: |
            experiment_data_*.zip
            *.json
            *.log
            *.txt
            *.md
          if-no-files-found: warn

      - name: 📝 Create workflow summary
        if: always()
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          # Test Refinement Summary
          
          ## Overview
          - **Initial Failures**: ${{ steps.refine.outputs.final_failures }}
          - **Refinement Status**: ${{ steps.refine.outputs.status }}
          - **Final Failures**: ${{ steps.test-run.outputs.failure_count }}
          
          ## Configuration
          - **Max Refinement Attempts**: ${{ env.VALIDATED_MAX_ATTEMPTS }}
          
          ## Details
          EOF
          
          # Add metrics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Metrics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -30 refinement_metrics.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No metrics"
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Cleanup
        if: always()
        run: |
          # Remove temporary files
          rm -rf "${TEMP_DIR}" 2>/dev/null || true

  create-pr:
    name: Create Pull Request
    needs: refine-tests
    runs-on: ubuntu-latest
    if: always()  # Tetap jalankan meski refine-tests gagal
    
    steps:
      - name: ⚠️ Check refinement status
        id: check-status
        run: |
          if [ "${{ needs.refine-tests.result }}" != "success" ]; then
            echo "status=refinement_failed" >> $GITHUB_ENV
            echo "::warning::Refinement job failed, but will attempt to create PR with available data"
          else
            echo "status=refinement_success" >> $GITHUB_ENV
          fi

      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.target_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history for better branch management

      - name: 💾 Download refined test files
        id: download-tests
        continue-on-error: true
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting refined test files artifact download URL..."
          ARTIFACT_NAME="refined-test-files-${{ github.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::warning::Could not find refined test files artifact: $ARTIFACT_NAME"
            echo "has_tests=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o tests.zip
          
          # Verify zip file
          if [ ! -f "tests.zip" ]; then
            echo "::warning::Failed to download refined test files artifact"
            echo "has_tests=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Extract to tests directory
          unzip -o tests.zip -d tests/
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to extract refined test files artifact"
            echo "has_tests=false" >> $GITHUB_ENV
            exit 0
          fi
          rm tests.zip
          
          # Verify downloaded files
          if [ ! -d "tests" ] || [ -z "$(ls -A tests/ 2>/dev/null)" ]; then
            echo "::warning::No test files found in artifact"
            echo "has_tests=false" >> $GITHUB_ENV
          else
            echo "has_tests=true" >> $GITHUB_ENV
          fi

      - name: 💾 Download refined coverage files
        id: download-coverage
        continue-on-error: true
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting refined coverage files artifact download URL..."
          ARTIFACT_NAME="refined-coverage-files-${{ github.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::warning::Could not find refined coverage files artifact: $ARTIFACT_NAME"
            echo "has_coverage=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o coverage.zip
          
          # Verify zip file
          if [ ! -f "coverage.zip" ]; then
            echo "::warning::Failed to download refined coverage files artifact"
            echo "has_coverage=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Extract to current directory
          unzip -o coverage.zip
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to extract refined coverage files artifact"
            echo "has_coverage=false" >> $GITHUB_ENV
            exit 0
          fi
          rm coverage.zip
          
          # Verify coverage files
          if [ ! -f "coverage-final.json" ]; then
            echo "::warning::No coverage files found in artifact"
            echo "has_coverage=false" >> $GITHUB_ENV
          else
            echo "has_coverage=true" >> $GITHUB_ENV
          fi

      - name: 💾 Download refined experiment data
        id: download-experiment
        continue-on-error: true
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting refined experiment data artifact download URL..."
          ARTIFACT_NAME="refined-experiment-data-${{ github.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::warning::Could not find refined experiment data artifact: $ARTIFACT_NAME"
            echo "has_experiment=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o experiment.zip
          
          # Verify zip file
          if [ ! -f "experiment.zip" ]; then
            echo "::warning::Failed to download refined experiment data artifact"
            echo "has_experiment=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Extract to current directory
          unzip -o experiment.zip
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to extract refined experiment data artifact"
            echo "has_experiment=false" >> $GITHUB_ENV
            exit 0
          fi
          rm experiment.zip
          
          # Verify experiment data
          if ! ls experiment_data_*.zip >/dev/null 2>&1; then
            echo "::warning::No experiment data found in artifact"
            echo "has_experiment=false" >> $GITHUB_ENV
          else
            echo "has_experiment=true" >> $GITHUB_ENV
          fi

      - name: 🔄 Create new branch
        run: |
          # Create branch name with timestamp and run ID
          BRANCH_NAME="refined-tests-$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "::warning::Branch $BRANCH_NAME already exists, appending random suffix"
            BRANCH_NAME="${BRANCH_NAME}-$(openssl rand -hex 4)"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          fi
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME" || {
            echo "::error::Failed to create branch $BRANCH_NAME"
            exit 1
          }
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 📝 Commit changes
        id: commit
        run: |
          set -euo pipefail
          
          # Add all changes
          git add tests/
          
          # Add coverage files if they exist
          if [ -d "coverage-final" ] && [ -n "$(ls -A coverage-final/ 2>/dev/null)" ]; then
            echo "📊 Adding coverage files..."
            git add coverage-final/
            echo "✅ Coverage files added"
          else
            echo "ℹ️ No coverage files to add"
          fi
          
          # Add other files
          git add *.json
          git add *.log
          git add *.txt
          git add *.md
          git add experiment_data_*.zip
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Create commit message based on available data
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_MSG="Refined tests and updated data [$TIMESTAMP]\n\n"
          
          if [ "${{ env.has_tests }}" = "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}- Updated test files\n"
          fi
          
          if [ "${{ env.has_coverage }}" = "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}- Updated coverage data\n"
          fi
          
          if [ "${{ env.has_experiment }}" = "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}- Added experiment data\n"
          fi
          
          if [ "${{ env.status }}" = "refinement_failed" ]; then
            COMMIT_MSG="${COMMIT_MSG}\n⚠️ Note: Refinement job failed, but available data is included"
          fi
          
          # Commit changes
          if ! git commit -m "$(echo -e "$COMMIT_MSG")"; then
            echo "::error::Failed to commit changes"
            exit 1
          fi
          echo "has_changes=true" >> $GITHUB_ENV

      - name: 📤 Push changes
        if: env.has_changes == 'true'
        run: |
          set -euo pipefail
          
          # Retry push up to 3 times
          for i in {1..3}; do
            if git push origin "$BRANCH_NAME"; then
              echo "Successfully pushed to $BRANCH_NAME"
              exit 0
            fi
            echo "::warning::Push attempt $i failed, retrying..."
            sleep 5
          done
          
          echo "::error::Failed to push changes after 3 attempts"
          exit 1

      - name: 📋 Create Pull Request
        if: env.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Refined Tests and Updated Coverage"
          body: |
            This PR contains refined tests and updated coverage data.
            
            ## Changes
            ${{ env.has_tests == 'true' && '- Updated test files' || '' }}
            ${{ env.has_coverage == 'true' && '- Updated coverage data' || '' }}
            ${{ env.has_experiment == 'true' && '- Added experiment data' || '' }}
            
            ## Status
            - Refinement Status: ${{ env.status }}
            ${{ needs.refine-tests.outputs.final_failures != '' && format('- Initial Failures: %s', needs.refine-tests.outputs.final_failures) || '' }}
            ${{ needs.refine-tests.outputs.status != '' && format('- Refinement Status: %s', needs.refine-tests.outputs.status) || '' }}
            ${{ needs.refine-tests.outputs.failure_count != '' && format('- Final Failures: %s', needs.refine-tests.outputs.failure_count) || '' }}
            
            ## Coverage Summary
            ${{ needs.refine-tests.outputs.coverage_summary != '' && format('```markdown\n%s\n```', needs.refine-tests.outputs.coverage_summary) || 'No coverage data available' }}
            
            ## Notes
            ${{ env.status == 'refinement_failed' && '⚠️ Note: Refinement job failed, but available data is included' || '' }}
          branch: ${{ env.BRANCH_NAME }}
          base: ${{ github.event.inputs.target_branch }}
          labels: |
            tests
            coverage
            refinement
          delete-branch: false  # Keep branch for debugging if needed