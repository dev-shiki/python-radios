name: Create Pull Request

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of the refine-tests workflow'
        required: true
      target_branch:
        description: 'Branch to create PR against'
        required: true
        default: 'main'

jobs:
  create-pr:
    name: Create Pull Request
    runs-on: ubuntu-latest
    
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.target_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 💾 Download refined test files
        id: download-tests
        continue-on-error: true
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting refined test files artifact download URL..."
          ARTIFACT_NAME="refined-test-files-${{ github.event.inputs.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.inputs.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::warning::Could not find refined test files artifact: $ARTIFACT_NAME"
            echo "has_tests=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o tests.zip
          
          # Verify zip file
          if [ ! -f "tests.zip" ]; then
            echo "::warning::Failed to download refined test files artifact"
            echo "has_tests=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Extract to tests directory
          unzip -o tests.zip -d tests/
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to extract refined test files artifact"
            echo "has_tests=false" >> $GITHUB_ENV
            exit 0
          fi
          rm tests.zip
          
          # Verify downloaded files
          if [ ! -d "tests" ] || [ -z "$(ls -A tests/ 2>/dev/null)" ]; then
            echo "::warning::No test files found in artifact"
            echo "has_tests=false" >> $GITHUB_ENV
          else
            echo "has_tests=true" >> $GITHUB_ENV
          fi

      - name: 💾 Download coverage files
        id: download-coverage
        continue-on-error: true
        run: |
          # Get artifact download URL using GitHub API
          echo "Getting coverage files artifact download URL..."
          ARTIFACT_NAME="refined-coverage-files-${{ github.event.inputs.run_id }}"
          DOWNLOAD_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.inputs.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::warning::Could not find coverage files artifact: $ARTIFACT_NAME"
            echo "has_coverage=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download using curl with GitHub token
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$DOWNLOAD_URL" \
            -o coverage.zip
          
          # Verify zip file
          if [ ! -f "coverage.zip" ]; then
            echo "::warning::Failed to download coverage files artifact"
            echo "has_coverage=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Create coverage directory
          mkdir -p coverage-final/
          
          # Extract to current directory
          unzip -o coverage.zip
          if [ $? -ne 0 ]; then
            echo "::warning::Failed to extract coverage files artifact"
            echo "has_coverage=false" >> $GITHUB_ENV
            exit 0
          fi
          rm coverage.zip
          
          # Move coverage files to coverage-final directory
          if [ -f "coverage-initial.json" ]; then
            mv coverage-initial.json coverage-final/
            echo "✅ Moved coverage-initial.json"
          fi
          if [ -f "coverage-after-generation.json" ]; then
            mv coverage-after-generation.json coverage-final/
            echo "✅ Moved coverage-after-generation.json"
          fi
          
          # Verify coverage files
          if [ ! -f "coverage-final/coverage-final.json" ] && [ ! -f "coverage-final/coverage-initial.json" ] && [ ! -f "coverage-final/coverage-after-generation.json" ]; then
            echo "::warning::No coverage files found in artifact"
            echo "has_coverage=false" >> $GITHUB_ENV
          else
            echo "has_coverage=true" >> $GITHUB_ENV
            echo "✅ Coverage files ready"
          fi

      - name: 🔄 Create new branch
        run: |
          # Create branch name with timestamp and run ID
          BRANCH_NAME="refined-tests-$(date +%Y%m%d-%H%M%S)-${{ github.event.inputs.run_id }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "::warning::Branch $BRANCH_NAME already exists, appending random suffix"
            BRANCH_NAME="${BRANCH_NAME}-$(openssl rand -hex 4)"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          fi
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME" || {
            echo "::error::Failed to create branch $BRANCH_NAME"
            exit 1
          }
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 📝 Commit changes
        id: commit
        run: |
          set -euo pipefail
          
          # Add test files
          if [ "${{ env.has_tests }}" = "true" ]; then
            echo "📝 Adding test files..."
            git add tests/
          fi
          
          # Add coverage files if they exist
          if [ "${{ env.has_coverage }}" = "true" ]; then
            echo "📊 Adding coverage files..."
            if [ -d "coverage-final" ] && [ -n "$(ls -A coverage-final/ 2>/dev/null)" ]; then
              git add coverage-final/
              echo "✅ Coverage files added"
            else
              echo "ℹ️ No coverage files to add"
            fi
          fi
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Create commit message
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_MSG="Refined tests and updated data [$TIMESTAMP]\n\n"
          
          if [ "${{ env.has_tests }}" = "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}- Updated test files\n"
          fi
          
          if [ "${{ env.has_coverage }}" = "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}- Updated coverage data\n"
            # Add coverage details to commit message
            if [ -f "coverage-final/coverage-final.json" ]; then
              COVERAGE=$(jq -r '.totals.percent_covered // 0' "coverage-final/coverage-final.json")
              COMMIT_MSG="${COMMIT_MSG}- Final Coverage: ${COVERAGE}%\n"
            fi
            if [ -f "coverage-final/coverage-initial.json" ]; then
              INITIAL_COVERAGE=$(jq -r '.totals.percent_covered // 0' "coverage-final/coverage-initial.json")
              COMMIT_MSG="${COMMIT_MSG}- Initial Coverage: ${INITIAL_COVERAGE}%\n"
            fi
          fi
          
          # Commit changes
          if ! git commit -m "$(echo -e "$COMMIT_MSG")"; then
            echo "::error::Failed to commit changes"
            exit 1
          fi
          echo "has_changes=true" >> $GITHUB_ENV

      - name: 📤 Push changes
        if: env.has_changes == 'true'
        run: |
          set -euo pipefail
          
          # Retry push up to 3 times
          for i in {1..3}; do
            if git push origin "$BRANCH_NAME"; then
              echo "Successfully pushed to $BRANCH_NAME"
              exit 0
            fi
            echo "::warning::Push attempt $i failed, retrying..."
            sleep 5
          done
          
          echo "::error::Failed to push changes after 3 attempts"
          exit 1

      - name: 📋 Create Pull Request
        if: env.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Refined Tests and Updated Coverage"
          body: |
            This PR contains refined tests and updated coverage data.
            
            ## Changes
            ${{ env.has_tests == 'true' && '- Updated test files' || '' }}
            ${{ env.has_coverage == 'true' && '- Updated coverage data' || '' }}
            
            ## Notes
            - Created from workflow run: ${{ github.event.inputs.run_id }}
            - Target branch: ${{ github.event.inputs.target_branch }}
          branch: ${{ env.BRANCH_NAME }}
          base: ${{ github.event.inputs.target_branch }}
          labels: |
            tests
            coverage
            refinement
          delete-branch: false 